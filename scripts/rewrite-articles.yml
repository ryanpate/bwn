name: Rewrite Articles with Millennial Voice

on:
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      limit:
        description: 'Number of articles to rewrite (leave empty for all)'
        required: false
        default: '5'
      since_date:
        description: 'Only rewrite articles after this date (YYYY-MM-DD)'
        required: false
        default: ''
      specific_article:
        description: 'Specific article path (e.g., 2024/10/bitcoin-news)'
        required: false
        default: ''
      dry_run:
        description: 'Dry run mode (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
        - true
        - false

jobs:
  rewrite-articles:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # Use a PAT or deploy key for pushing changes
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Full history for better git operations

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install openai pyyaml slugify-python tenacity feedparser requests beautifulsoup4 lxml

    - name: Create required directories
      run: |
        mkdir -p data
        mkdir -p backups/articles

    - name: Run rewrite script
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_MODEL: gpt-4o-mini
      run: |
        # Download the rewrite script if not in repo
        if [ ! -f "scripts/rewrite_articles.py" ]; then
          mkdir -p scripts
          # You'll need to add the script to your repo first
          echo "Error: scripts/rewrite_articles.py not found"
          exit 1
        fi
        
        # Build command based on inputs
        CMD="python scripts/rewrite_articles.py"
        
        if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
          CMD="$CMD --dry-run"
        fi
        
        if [ -n "${{ github.event.inputs.limit }}" ]; then
          CMD="$CMD --limit ${{ github.event.inputs.limit }}"
        fi
        
        if [ -n "${{ github.event.inputs.since_date }}" ]; then
          CMD="$CMD --since ${{ github.event.inputs.since_date }}"
        fi
        
        if [ -n "${{ github.event.inputs.specific_article }}" ]; then
          CMD="$CMD --specific ${{ github.event.inputs.specific_article }}"
        fi
        
        echo "Running: $CMD"
        $CMD

    - name: Commit and push changes
      if: github.event.inputs.dry_run != 'true'
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'
        
        # Check if there are changes
        if [[ `git status --porcelain` ]]; then
          git add content/news/
          git add data/rewrite_log.json
          
          # Create commit message with details
          if [ -n "${{ github.event.inputs.specific_article }}" ]; then
            COMMIT_MSG="ðŸ”„ Rewrite article: ${{ github.event.inputs.specific_article }}"
          elif [ -n "${{ github.event.inputs.limit }}" ]; then
            COMMIT_MSG="ðŸ”„ Rewrite ${{ github.event.inputs.limit }} articles with millennial voice"
          else
            COMMIT_MSG="ðŸ”„ Rewrite articles with millennial voice"
          fi
          
          git commit -m "$COMMIT_MSG" \
            -m "Automated rewrite via GitHub Actions" \
            -m "Limit: ${{ github.event.inputs.limit }}" \
            -m "Since: ${{ github.event.inputs.since_date }}"
          
          git push
        else
          echo "No changes to commit"
        fi

    - name: Create summary
      if: always()
      run: |
        echo "## Rewrite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Limit**: ${{ github.event.inputs.limit || 'No limit' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Since Date**: ${{ github.event.inputs.since_date || 'All dates' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Specific Article**: ${{ github.event.inputs.specific_article || 'None' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "data/rewrite_log.json" ]; then
          echo "### Rewritten Articles" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          tail -20 data/rewrite_log.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi